{"version":3,"sources":["components/widgets/WeekWeather.tsx","components/widgets/DayWeather.tsx","components/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WeekWeather","useState","weekForecast","React","cancelToken","axios","CancelToken","source","setSelectedOption","className","placeholder","onChange","options","value","label","src","weather","icon","DayWeather","selectedOption","selectedDate","setSelectedDate","setWeekForecast","coordinates","sanktpetersburg","saratov","lat","samara","saransk","setLoading","setError","cancelTokenSource","useEffect","get","lon","valueAsNumber","token","headers","timeout","then","response","data","console","log","catch","ex","error","isCancel","code","status","e","target","type","current","Number","temp","toFixed","HomePage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c44092f4.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './Weather.scss'\nimport Select from 'react-select';\nimport { convertTypeAcquisitionFromJson } from 'typescript';\nimport axios, { CancelTokenSource } from 'axios';\n// interface IPost {\n//     id: number;\n//     userId?: number;\n//     title: string;\n//     body: string;\n//   }\n// const defaultPosts: IPost[] = [];\n\nfunction WeekWeather() {\n\n  // const [posts, setPosts]: [IPost[], (posts: IPost[]) => void] = React.useState(\n  //   defaultPosts\n  // );\n  const [weekForecast, setWeekForecast] = useState<any>()\n\n  const [loading, setLoading]: [\n    boolean,\n    (loading: boolean) => void\n  ] = React.useState<boolean>(true);\n\n  const [error, setError]: [string, (error: string) => void] = React.useState(\n    ''\n  );\n\n  const cancelToken = axios.CancelToken; //create cancel token\n  const [cancelTokenSource, setCancelTokenSource]: [\n    CancelTokenSource,\n    (cancelTokenSource: CancelTokenSource) => void\n  ] = React.useState(cancelToken.source());\n\n  const handleCancelClick = () => {\n    if (cancelTokenSource) {\n      cancelTokenSource.cancel('User cancelled operation');\n    }\n  };\n\n  // useEffect(() => {\n  //   axios\n  //     .get<any>('http://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=4434c55d72bc6fd2726403754e664105', {\n  //     // .get<any>('https://jsonplaceholder.typicode.com/posts', {\n  //       cancelToken: cancelTokenSource.token,\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //       },\n  //       timeout: 10000,\n  //     })\n  //     .then((response) => {\n  //       setWeekForecast(response.data);\n  //       console.log(response.data)\n  //       setLoading(false);\n  //     })\n  //     .catch((ex) => {\n  //       let error = axios.isCancel(ex)\n  //         ? 'Request Cancelled'\n  //         : ex.code === 'ECONNABORTED'\n  //         ? 'A timeout has occurred'\n  //         : ex.response.status === 404\n  //         ? 'Resource Not Found'\n  //         : 'An unexpected error has occurred';\n\n  //       setError(error);\n  //       setLoading(false);\n  //     });\n  // }, []);\n\n\n  //____________________________\n  const options = [\n    { value: 'sankt petersburg', label: 'Sankt Petersburg' },\n    { value: 'saratov', label: 'Saratov' },\n    { value: 'samara', label: 'Samara' },\n    { value: 'saransk', label: 'Saransk' },\n  ];\n  const [selectedOption, setSelectedOption] = useState<any>({});\n  return (\n    <div className=\"weather\">\n      <h1 className=\"weather__header\">\n        7 Days Forecast\n      </h1>\n      <div className=\"weather__selects\">\n        <Select\n          placeholder=\"Select city\"\n          onChange={setSelectedOption}\n          options={options}\n          className=\"weather__select\"\n        />\n      </div>\n      <div className=\"weather__content\">\n        {weekForecast == null ?\n         <div className=\"weather__content__temp-icon\">\n          <p className=\"weather__content__temp-icon__text\">Fill in all the fields and the weather will be displayed</p>\n          </div> :\n          <img className=\"weather__content__main-icon\" src={\"http://openweathermap.org/img/wn/\" + weekForecast.weather[0].icon + \"@2x.png\"} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default WeekWeather;\n","import React, {useState, useEffect} from 'react';\nimport './Weather.scss'\nimport Select from 'react-select'\nimport axios, { CancelTokenSource } from 'axios';\ninterface ISel {\n  value: String,\n  label: String\n}\nfunction DayWeather() {\n\n  const options = [\n    { value: 'sanktpetersburg', label: 'Sankt Petersburg' },\n    { value: 'saratov', label: 'Saratov' },\n    { value: 'samara', label: 'Samara' },\n    { value: 'saransk', label: 'Saransk' },\n  ];\n  const [selectedOption, setSelectedOption] = useState<any>({ value: '', label: '' });\n  const [selectedDate, setSelectedDate] = useState<any>('');\n  const [weekForecast, setWeekForecast] = useState<any>('')\n\n  const coordinates: {[index: string]:any} = {\n    sanktpetersburg: { 'lat': '59.9', 'lon': '30.3' } ,\n    saratov: { lat: '51.5', 'lon': '45.9' } ,\n    samara: { 'lat': '53.2', 'lon': '50.2' } ,\n    saransk: { 'lat': '54.1', 'lon': '45.1' } \n  };\n  //____________________________\n  \n\n  const [loading, setLoading]: [\n    boolean,\n    (loading: boolean) => void\n  ] = React.useState<boolean>(true);\n\n  const [error, setError]: [string, (error: string) => void] = React.useState(\n    ''\n  );\n\n  const cancelToken = axios.CancelToken; //create cancel token\n  const [cancelTokenSource, setCancelTokenSource]: [\n    CancelTokenSource,\n    (cancelTokenSource: CancelTokenSource) => void\n  ] = React.useState(cancelToken.source());\n\n  const handleCancelClick = () => {\n    if (cancelTokenSource) {\n      cancelTokenSource.cancel('User cancelled operation');\n    }\n  };\n\n  useEffect(() => {\n    if (selectedOption.value != '' && selectedDate != '') {\n      // console.log(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${coordinates[selectedOption.value].lat}&lon=${coordinates[selectedOption.value].lon}&dt=${selectedDate.valueAsNumber/1000}&appid=4434c55d72bc6fd2726403754e664105`)\n\n      axios\n        .get<any>(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${coordinates[selectedOption.value].lat}&lon=${coordinates[selectedOption.value].lon}&dt=${selectedDate.valueAsNumber/1000}&appid=4434c55d72bc6fd2726403754e664105`, {\n          cancelToken: cancelTokenSource.token,\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          timeout: 10000,\n        })\n        .then((response) => {\n          setWeekForecast(response.data);\n          console.log(response.data)\n          // console.log(weekForecast)\n          setLoading(false);\n        })\n        .catch((ex) => {\n          let error = axios.isCancel(ex)\n            ? 'Request Cancelled'\n            : ex.code === 'ECONNABORTED'\n              ? 'A timeout has occurred'\n              : ex.response.status === 404\n                ? 'Resource Not Found'\n                : 'An unexpected error has occurred';\n\n          setError(error);\n          setLoading(false);\n        });\n    }\n  }, [selectedOption, selectedDate]);\n\n\n\n  return (\n    <div className=\"weather weather--day-mobile\">\n      <h1 className=\"weather__header\">\n        Forecast for a Date in the Past\n      </h1>\n      <div className=\"weather__selects\">\n        <Select\n          placeholder=\"Select city\"\n          onChange={setSelectedOption}\n          options={options}\n          className=\"weather__select\"\n        />\n        <input\n          placeholder=\"Select date\"\n          onChange={e => setSelectedDate(e.target)}\n          type=\"date\"\n          className=\"weather__select\"\n          />\n      </div>\n      <div className=\"weather__content\">\n        \n        {weekForecast == '' ?\n          <div className=\"weather__content__temp-icon\">\n            <p className=\"weather__content__temp-icon__text\">Fill in all the fields and the weather will be displayed</p>\n          </div> :\n          <div>\n            <p className=\"weather__content__date\">{selectedDate.value}</p>\n            <div className=\"weather__content__main-icon \">\n              <img  className=\"weather__content__main-icon--icon\" src={\"http://openweathermap.org/img/wn/\" + weekForecast.current.weather[0].icon + \"@2x.png\"} />\n            </div>\n            <p className=\"weather__content__temp \">+{Number((weekForecast.current.temp-273).toFixed(0))}&#186;</p>\n          </div>\n        }\n      </div>\n    </div>\n  );\n  \n}\n\nexport default DayWeather;\n ","import React from 'react';\nimport './HomePage.scss'\nimport WeekWeather from './widgets/WeekWeather'\nimport DayWeather from './widgets/DayWeather'\nfunction HomePage() {\n  return (\n\t  <div className=\"home-page home-page--background\">\n\t\t  <h1 className=\"home-page__header\">\n\t\t\t\t<span className=\"home-page__header_first\">Weather</span>\n\t\t\t  \t<span className=\"home-page__header_second\">forecast</span>\n\t\t  </h1>\n\t\t  <div className=\"home-page__weather\">\n\t\t\t\t<WeekWeather />\n\t\t  \t\t<DayWeather />\n\t\t\t</div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport HomePage from './components/HomePage'\nfunction App() {\n  return (\n    <div >\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}